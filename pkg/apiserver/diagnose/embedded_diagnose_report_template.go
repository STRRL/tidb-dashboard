// Code generated for package diagnose by go-bindata DO NOT EDIT. (@generated)
// sources:
// pkg/apiserver/diagnose/templates/index.gohtml
// pkg/apiserver/diagnose/templates/table.gohtml
package diagnose

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tidbDashboardPkgApiserverDiagnoseTemplatesIndexGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4b\x6f\xe3\x36\x10\xbe\xe7\x57\x4c\xd9\x83\x1d\x6c\x45\xc6\x28\xba\x58\x78\x25\xa3\x49\x93\xa0\x87\xb4\xdb\x26\x69\x81\xa2\xe8\x81\xa2\xc6\x16\x13\x8a\xf4\x92\x23\x3b\xae\x91\xff\x5e\x48\xf2\x43\xb6\x94\x6c\xd0\xd5\x25\x7c\x0c\xbf\x79\x7c\xdf\x4c\xbc\x5e\x43\x86\x53\x6d\x11\x58\xf8\x6c\xa2\x4c\xcb\x99\x75\x41\x07\xa1\x6d\x86\x4f\x0c\x9e\x9f\x4f\x00\x00\xe2\x6f\x2e\x3f\xfd\x74\xff\xd7\x6f\x57\x90\x53\x61\x26\xcd\x59\xb5\x04\x23\xed\x2c\x61\x68\xd9\xf6\x10\x65\xd6\x2c\xeb\x6d\x81\x24\x41\xe5\xd2\x07\xa4\x84\xfd\x71\x7f\x1d\x7d\x60\xe2\xf8\xde\xca\x02\x13\xb6\xd0\xb8\x9c\x3b\x4f\x0c\x94\xb3\x84\x96\x12\xb6\xd4\x19\xe5\x49\x86\x0b\xad\x30\xaa\x37\xdf\x81\xb6\x9a\xb4\x34\x51\x50\xd2\x60\x32\xe2\x67\x07\x78\x46\xdb\xc7\xdd\x6e\xfb\x79\x34\x09\x0b\xb4\x32\x18\x72\x44\x62\x1d\x83\xdc\xe3\x34\x61\x39\xd1\x3c\x8c\x85\x50\x99\xe5\x0f\x21\x43\xa3\x17\x9e\x5b\x24\x61\xe7\x85\x48\x4b\x53\xc8\x1f\xcf\xf8\x07\x7e\x26\x54\x08\xcd\x9e\x17\xda\x72\x15\xc2\x41\x08\x41\x79\x3d\xa7\xaa\xac\xe8\x21\x78\xb5\x07\x2e\x03\xf2\xa9\xb3\x24\x97\x18\x5c\x81\x5c\xb9\x42\x78\x34\x28\x03\x06\xb1\xf8\x81\x7f\xcf\x47\xe2\x21\x08\x69\x0c\x7f\x08\x6c\x12\x8b\x06\xaa\x85\x4d\x9a\x0c\x4e\x2e\x1b\x96\x10\x6e\xb1\x2a\x58\x2c\x9a\xe3\x56\x08\x55\xae\x93\x83\x34\xb9\xaf\x6d\xa3\xaa\xb6\x52\x5b\xf4\xb0\xee\x94\xa1\x90\x7e\xa6\x6d\x94\x3a\x22\x57\x8c\x61\xf4\x7e\xfe\xf4\xf1\xc0\xe8\xf9\x60\x47\x9e\x87\x32\x5d\x48\x53\x62\xe8\x41\x4b\xa5\x7a\x9c\x79\x57\xda\x2c\x52\xce\x38\x3f\x06\xa3\x67\x39\xa9\x95\xb4\x6f\x45\xe5\x53\x67\xb2\x1e\xe8\x4c\x87\xb9\x91\xab\x31\x58\x67\xf1\x35\xb0\x3d\x54\x44\x6e\x36\x33\xf8\x1a\x98\xb6\x46\x5b\x8c\x52\xe3\xd4\xe3\xc7\x8e\x59\x2d\xbf\x31\xbc\x3f\x7b\xb9\x28\xb1\x68\x15\x3e\x16\xfb\x56\x88\x53\x97\xad\x36\xcb\x80\x8a\xb4\xb3\xa0\x8c\x0c\x21\x61\x9b\x2d\x6b\xb1\x97\xe9\xc5\xf6\x76\xc7\x16\x3b\x64\x33\xce\x47\x5b\x93\x9a\x7b\xd0\x21\x0a\xfa\x5f\x8c\x46\x6c\x72\xaf\x2f\x2f\xe0\xee\xf7\x1b\xb8\xdc\x36\x33\xdc\xad\x02\x61\xb1\x93\x4b\x3e\x3a\x42\xcb\xf4\x62\xd2\x49\x38\x4e\x4b\xa2\x7d\xa0\x9b\x9d\x0e\x51\xd5\x63\xcd\xdf\x59\x4e\x0c\x74\x96\x30\x7c\x9a\x4b\x9b\x45\xd2\x98\x28\x25\xcb\xba\x60\xd5\x77\x55\x1b\xc1\xb9\x31\x5d\x5f\xa2\x81\xff\xba\x28\x2a\xb5\x7c\x21\x86\xeb\x4a\x50\x6f\x8f\x20\x16\x9d\xd2\xac\xd7\xe0\xa5\x9d\x21\xf0\xed\x70\x3c\xba\x25\x2c\xe6\x46\x52\x67\xa2\x92\x4c\x0d\xb2\xee\xb3\xf5\x1a\xd0\x66\xed\xd3\x96\xd7\x58\x6c\x04\x32\x39\xd9\xc8\xe7\x68\x24\x28\x67\x03\x41\x23\xee\x0b\xb2\x01\x12\xc8\x9c\x2a\x0b\xb4\xc4\x3f\x97\xe8\x57\x77\x68\x50\x91\xf3\xe7\xc6\x0c\x07\x9d\x7e\x18\x9c\x1e\x21\x35\x4c\x9e\x1b\x73\x41\xf6\x45\xac\xe1\xe0\xdb\x43\xc6\x3b\x30\x15\x15\x5f\x06\x69\x13\x36\x38\x3d\xd9\x61\x4c\x4b\xdb\x34\x49\x2e\x6d\x66\xf0\xbe\x0e\xf5\x12\x49\x6a\x33\x3c\x3d\x6a\xe1\x7d\xea\x7c\xea\xfc\x95\x54\xf9\x30\xad\xbc\x4e\xfa\x46\x12\x59\xee\xac\x32\x5a\x3d\x42\xb2\xf7\xd2\xc1\x3c\xcc\x45\x95\xfe\xd6\x2d\x21\xa9\x9f\xcf\x90\xce\x89\xbc\x4e\x4b\xc2\xe1\x20\x93\x24\x23\xef\x96\xad\xfc\xbb\xef\xa9\xea\xfe\x2b\xb3\x01\x98\x4b\x8f\x96\x7e\x75\x19\xf6\x2f\x5f\x01\x0a\x65\xfa\x67\x45\xde\xad\x5b\x56\x3c\x6f\x70\x7b\x68\x26\xff\xf7\x36\xb2\x84\x0d\xe0\xdd\x36\x85\x77\x30\x60\xff\xbc\x10\x6b\x1b\x7c\x57\x49\x5f\xe5\x3d\x01\xef\x96\xbc\x6e\xc0\x1b\x1d\x88\x37\x15\x1f\x0e\x2a\xf6\x06\xa7\x2d\xda\xda\x9f\x9e\x42\xc5\x03\xd7\xd6\xa2\xff\xf9\xfe\x97\x1b\x48\x92\x04\x06\x8d\x6c\x06\x2f\x15\x7c\x4b\x52\xeb\x15\x34\x7e\x7a\xcd\x9f\x01\x4d\xe8\x9b\xe9\x2f\x62\x6d\xfc\xf7\xa3\x75\x4e\x0f\x4f\x9e\xf7\x85\xdb\x5f\xf4\x29\x74\x5f\x11\x21\x40\xd6\x1a\x1b\xef\x5c\x83\xf3\xc7\x29\xed\x84\xd8\x98\x7c\xf2\xd7\x4d\xf7\x0c\x9b\xb7\x5f\xa3\xf8\x7e\x1a\xfa\x71\xdb\x45\xab\x7b\x64\xd8\x55\xca\x1b\x2a\xd2\x9e\x20\x6f\xea\xb6\xe3\xac\x77\x22\xe9\x01\xdf\xcf\x95\xff\x07\xdd\x68\xf6\x08\xf8\xf0\x87\x56\x2c\x5a\xff\xad\x45\xf3\x7b\x77\x37\xa3\xff\x0b\x00\x00\xff\xff\xef\x23\x41\xd6\x30\x0b\x00\x00")

func tidbDashboardPkgApiserverDiagnoseTemplatesIndexGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_tidbDashboardPkgApiserverDiagnoseTemplatesIndexGohtml,
		"tidb-dashboard/pkg/apiserver/diagnose/templates/index.gohtml",
	)
}

func tidbDashboardPkgApiserverDiagnoseTemplatesIndexGohtml() (*asset, error) {
	bytes, err := tidbDashboardPkgApiserverDiagnoseTemplatesIndexGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tidb-dashboard/pkg/apiserver/diagnose/templates/index.gohtml", size: 2864, mode: os.FileMode(420), modTime: time.Unix(1583392549, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tidbDashboardPkgApiserverDiagnoseTemplatesTableGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x4d\x8f\xda\x3c\x10\xbe\xbf\xbf\x62\x14\xad\x5e\xed\x4a\x0d\xd9\x8f\xf6\xb2\x0d\xb9\xac\x7a\xd8\x4b\x0f\x6d\xd5\xbb\x89\x27\x89\xab\x60\x67\x6d\x27\xb0\xa5\xfc\xf7\xca\x0e\x01\x12\x62\x30\x05\x0e\x10\xec\x99\x67\x3e\x3c\xf3\x8c\xb3\x5a\x01\xc5\x8c\x71\x84\x40\xbd\x95\x21\x65\x24\xe7\x42\x31\x15\x69\x32\x2b\x31\x80\xf5\xfa\x3f\x00\x80\x98\xb2\x06\xd2\x92\x28\x35\x0d\x24\x56\x42\xea\x30\x15\x5c\x13\xc6\x51\x06\x89\x15\x31\x9f\xd5\x0a\x24\xe1\x39\xc2\x4d\xfa\x4a\x97\x1f\xe0\x26\x85\xe7\x29\x4c\x5e\x88\xc6\x5c\xc8\xf7\x0e\x6d\x4f\x9c\x65\x80\x6f\xad\x38\xdc\x0f\xf7\x77\x32\x93\xb1\x2d\xeb\x58\xf1\xd0\xf9\xa5\x99\x2e\x11\x98\x0a\x15\xfb\x8d\xe1\x63\x90\xac\x56\x93\xf5\x3a\x8e\x8a\x87\x64\x0c\x15\x39\x1d\xf1\x07\x4b\x85\x3d\xa7\x1e\xae\xe9\xd4\xd3\x95\x9c\x7a\xbc\xa6\x53\x1f\x2f\x70\xea\x8a\x6e\x7c\xfa\x47\x37\xfa\xab\x87\x2b\x71\xf1\xd4\x19\xec\x45\x0c\x93\x1f\xd6\xbe\xb5\xf8\xd4\xab\x61\xe3\xff\x8b\x98\xcf\x91\xeb\x2f\x5f\x87\x36\xe3\xca\x2a\xef\xef\xc7\x51\x95\x1c\xf3\xc0\xf6\xd2\x36\x6a\xfb\x87\xa9\x70\x26\x24\x45\x89\xd4\x3c\x17\xa2\x41\xd9\x6d\x70\x22\xa5\x58\x98\xa7\xac\x2e\xcb\x05\xa3\xba\x08\xfa\x19\x89\x75\x81\x84\x0e\xd7\xe4\x68\xda\xda\x86\x9c\xbc\x88\xb2\x9e\x73\xe7\xa9\xe8\xc2\x46\x65\x83\xd1\x85\x6f\xfe\xe3\x68\x68\xd4\x68\x8f\xb8\x36\x13\xf4\x3d\x19\x1e\xdd\x86\x2a\xa4\x58\xb4\x64\x61\x82\x36\x74\xf1\x4d\x2c\x94\xa3\xb2\x6e\x4a\xe4\x46\xc6\xfc\x4c\xbe\xd7\xb3\x9f\xa4\xac\x71\x54\x78\x34\x1d\x7d\xc3\x4d\x6b\xb6\xb1\x46\xdd\x48\x3b\x44\x3a\x8e\xb8\x87\xec\x2c\xfb\x3d\x19\x96\x01\xe1\x14\x6e\x4d\xbc\x5d\x19\xdd\xc1\xad\x69\xee\xc6\xd2\xe0\xdd\x29\x10\x18\x30\x32\x95\xa2\xa2\x62\xc1\x0f\x2a\xa9\xae\x82\xe3\x2e\x1f\x43\x0b\xb5\x64\x79\xde\xe3\xf7\x81\x92\xaa\x08\xdf\xf6\x56\x2a\x38\x14\x44\x85\x1a\x97\x3a\x64\x3c\x13\x47\x4c\xc7\xac\x53\xcb\x88\x82\x8c\x58\xf9\x30\x65\x32\x2d\x31\x48\xe2\x88\x39\x4d\x46\xc6\xa6\x67\x4c\x11\x65\xcd\x05\xe1\xcf\x91\xd7\x9e\xe9\x73\x62\x98\x21\x89\x5c\x9f\x01\xe3\x84\x62\x1a\xe7\x67\xe2\x40\x47\x57\xfb\xa5\x36\xa0\x2b\x2f\x0c\xff\x4c\x9e\x29\xee\x29\xea\x21\x36\x4e\x50\x23\x52\x5d\xfb\xe5\xba\x65\x93\xfb\x7e\xef\x79\xb4\xde\xff\x7c\xa6\xaa\xcf\xfb\xdf\xa7\x03\x20\x50\x48\xcc\xa6\xc1\x2f\xd2\x10\x95\x4a\x56\xe9\xe7\x46\x30\x7a\x7b\x7f\x17\xf8\x24\x6a\x53\x0c\xaa\x9e\x35\x96\xa7\x42\x2d\xf2\xbc\x44\x2f\x5d\x4a\x34\x09\xa5\x58\x4c\x83\xb6\x10\x5e\xe9\x72\xbd\x0e\x12\x5c\x56\x84\xd3\x38\x22\x97\xe6\x35\x8e\x5c\xc4\xe8\xd6\x3d\x1c\x1c\xb0\x3d\x9d\xed\xc1\xb8\x8c\xee\x86\xda\xd1\x09\xb0\xb5\xa5\xe5\x41\xfe\x20\x13\x25\x0d\x5c\xa9\x39\x95\x90\xfe\x1d\xb7\x9d\x1f\x3e\x9c\xed\x73\xdf\x1d\x8f\x80\x26\x7f\xc2\x10\x76\x13\xfa\xc4\x24\x82\xe3\x57\x34\x97\x8d\xb3\xf1\xbd\x1a\xee\x74\xf9\xb8\x27\xb5\x43\xd7\xf7\x36\xb8\xc1\xef\xdf\x3e\xe2\xf6\xdd\xa6\x5d\xd8\x30\xcb\x56\xf5\x6f\x00\x00\x00\xff\xff\xac\x1e\xd0\xd9\x10\x0d\x00\x00")

func tidbDashboardPkgApiserverDiagnoseTemplatesTableGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_tidbDashboardPkgApiserverDiagnoseTemplatesTableGohtml,
		"tidb-dashboard/pkg/apiserver/diagnose/templates/table.gohtml",
	)
}

func tidbDashboardPkgApiserverDiagnoseTemplatesTableGohtml() (*asset, error) {
	bytes, err := tidbDashboardPkgApiserverDiagnoseTemplatesTableGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tidb-dashboard/pkg/apiserver/diagnose/templates/table.gohtml", size: 3344, mode: os.FileMode(420), modTime: time.Unix(1583392549, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tidb-dashboard/pkg/apiserver/diagnose/templates/index.gohtml": tidbDashboardPkgApiserverDiagnoseTemplatesIndexGohtml,
	"tidb-dashboard/pkg/apiserver/diagnose/templates/table.gohtml": tidbDashboardPkgApiserverDiagnoseTemplatesTableGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tidb-dashboard": &bintree{nil, map[string]*bintree{
		"pkg": &bintree{nil, map[string]*bintree{
			"apiserver": &bintree{nil, map[string]*bintree{
				"diagnose": &bintree{nil, map[string]*bintree{
					"templates": &bintree{nil, map[string]*bintree{
						"index.gohtml": &bintree{tidbDashboardPkgApiserverDiagnoseTemplatesIndexGohtml, map[string]*bintree{}},
						"table.gohtml": &bintree{tidbDashboardPkgApiserverDiagnoseTemplatesTableGohtml, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
