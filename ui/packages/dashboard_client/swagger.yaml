basePath: /dashboard/api
definitions:
  clusterinfo.AlertManagerInfo:
    properties:
      binary_path:
        type: string
      ip:
        type: string
      port:
        type: integer
    type: object
  clusterinfo.ClusterInfo:
    properties:
      alert_manager:
        $ref: '#/definitions/clusterinfo.AlertManagerInfo'
        type: object
      grafana:
        $ref: '#/definitions/clusterinfo.GrafanaInfo'
        type: object
      pd:
        properties:
          err:
            type: string
          nodes:
            items:
              $ref: '#/definitions/clusterinfo.PDInfo'
            type: array
        type: object
      tidb:
        properties:
          err:
            type: string
          nodes:
            items:
              $ref: '#/definitions/clusterinfo.TiDBInfo'
            type: array
        type: object
      tikv:
        properties:
          err:
            type: string
          nodes:
            items:
              $ref: '#/definitions/clusterinfo.TiKVInfo'
            type: array
        type: object
    type: object
  clusterinfo.GrafanaInfo:
    properties:
      binary_path:
        type: string
      ip:
        type: string
      port:
        type: integer
    type: object
  clusterinfo.PDInfo:
    properties:
      deploy_path:
        type: string
      ip:
        type: string
      port:
        type: integer
      start_timestamp:
        type: integer
      status:
        type: integer
      version:
        type: string
    type: object
  clusterinfo.TiDBInfo:
    properties:
      binary_path:
        type: string
      ip:
        type: string
      port:
        type: integer
      start_timestamp:
        type: integer
      status:
        type: integer
      status_port:
        type: integer
      version:
        type: string
    type: object
  clusterinfo.TiKVInfo:
    properties:
      binary_path:
        type: string
      ip:
        type: string
      labels:
        additionalProperties:
          type: string
        type: object
      port:
        type: integer
      start_timestamp:
        type: integer
      status:
        type: integer
      status_port:
        type: integer
      version:
        type: string
    type: object
  decorator.LabelKey:
    properties:
      key:
        type: string
      labels:
        items:
          type: string
        type: array
    required:
      - key
      - labels
    type: object
  diagnose.GenerateReportRequest:
    properties:
      compare_end_time:
        type: integer
      compare_start_time:
        type: integer
      end_time:
        type: integer
      start_time:
        type: integer
    type: object
  diagnose.Report:
    properties:
      compare_end_time:
        type: string
      compare_start_time:
        type: string
      content:
        type: string
      end_time:
        type: string
      progress:
        description: 0~100
        type: integer
      start_time:
        type: string
    type: object
  info.DatabaseResponse:
    items:
      type: string
    type: array
  info.InfoResponse:
    properties:
      pd_end_point:
        type: string
      version:
        $ref: '#/definitions/utils.VersionInfo'
        type: object
    type: object
  info.WhoAmIResponse:
    properties:
      username:
        type: string
    type: object
  logsearch.CreateTaskGroupRequest:
    properties:
      request:
        $ref: '#/definitions/logsearch.SearchLogRequest'
        type: object
      targets:
        items:
          $ref: '#/definitions/utils.RequestTargetNode'
        type: array
    required:
      - request
      - targets
    type: object
  logsearch.PreviewModel:
    properties:
      id:
        type: integer
      level:
        type: integer
      message:
        type: string
      task_group_id:
        type: integer
      task_id:
        type: integer
      time:
        type: integer
    type: object
  logsearch.SearchLogRequest:
    properties:
      end_time:
        type: integer
      min_level:
        type: integer
      patterns:
        description: |-
          We use a string array to represent multiple CNF pattern sceniaor like:
          SELECT * FROM t WHERE c LIKE '%s%' and c REGEXP '.*a.*' because
          Golang and Rust don't support perl-like (?=re1)(?=re2)
        items:
          type: string
        type: array
      start_time:
        type: integer
    type: object
  logsearch.TaskGroupModel:
    properties:
      id:
        type: integer
      log_store_dir:
        type: string
      search_request:
        $ref: '#/definitions/logsearch.SearchLogRequest'
        type: object
      state:
        type: integer
      target_stats:
        $ref: '#/definitions/utils.RequestTargetStatistics'
        type: object
    type: object
  logsearch.TaskGroupResponse:
    properties:
      task_group:
        $ref: '#/definitions/logsearch.TaskGroupModel'
        type: object
      tasks:
        items:
          $ref: '#/definitions/logsearch.TaskModel'
        type: array
    type: object
  logsearch.TaskModel:
    properties:
      error:
        type: string
      id:
        type: integer
      log_store_path:
        type: string
      state:
        type: integer
      target:
        $ref: '#/definitions/utils.RequestTargetNode'
        type: object
      task_group_id:
        type: integer
    type: object
  matrix.Matrix:
    properties:
      data:
        additionalProperties:
          items:
            items:
              type: integer
            type: array
          type: array
        type: object
      keyAxis:
        items:
          $ref: '#/definitions/decorator.LabelKey'
        type: array
      timeAxis:
        items:
          type: integer
        type: array
    required:
      - data
      - keyAxis
      - timeAxis
    type: object
  profiling.GroupDetailResponse:
    properties:
      server_time:
        type: integer
      task_group_status:
        $ref: '#/definitions/profiling.TaskGroupModel'
        type: object
      tasks_status:
        items:
          $ref: '#/definitions/profiling.TaskModel'
        type: array
    type: object
  profiling.StartRequest:
    properties:
      duration_secs:
        type: integer
      targets:
        items:
          $ref: '#/definitions/utils.RequestTargetNode'
        type: array
    type: object
  profiling.TaskGroupModel:
    properties:
      id:
        type: integer
      profile_duration_secs:
        type: integer
      started_at:
        type: integer
      state:
        type: integer
      target_stats:
        $ref: '#/definitions/utils.RequestTargetStatistics'
        type: object
    type: object
  profiling.TaskModel:
    properties:
      error:
        type: string
      file_path:
        type: string
      id:
        type: integer
      started_at:
        description:
          The start running time, reset when retry. Used to estimate approximate
          profiling progress.
        type: integer
      state:
        type: integer
      target:
        $ref: '#/definitions/utils.RequestTargetNode'
        type: object
      task_group_id:
        type: integer
    type: object
  statement.Detail:
    properties:
      agg_table_names:
        type: string
      avg_affected_rows:
        type: integer
      avg_total_keys:
        type: integer
      digest:
        type: string
      digest_text:
        type: string
      exec_count:
        type: integer
      last_seen:
        type: string
      plans:
        items:
          $ref: '#/definitions/statement.Plan'
        type: array
      query_sample_text:
        type: string
      schema_name:
        type: string
      schemas:
        description: |-
          Schemas is extracted from table_names column
          table_names example: "d1.t1,d2.t2", we extract the "d1,d2" as schemas
        type: string
      sum_latency:
        type: integer
    type: object
  statement.Node:
    properties:
      address:
        type: string
      avg_latency:
        type: integer
      avg_mem:
        type: integer
      exec_count:
        type: integer
      max_latency:
        type: integer
      sum_backoff_times:
        type: integer
      sum_latency:
        type: integer
    type: object
  statement.Overview:
    properties:
      agg_table_names:
        type: string
      avg_affected_rows:
        type: integer
      avg_latency:
        type: integer
      avg_mem:
        type: integer
      digest:
        type: string
      digest_text:
        type: string
      exec_count:
        type: integer
      max_latency:
        type: integer
      max_mem:
        type: integer
      min_latency:
        type: integer
      schema_name:
        type: string
      schemas:
        description: |-
          Schemas is extracted from table_names column
          table_names example: "d1.t1,d2.t2", we extract the "d1,d2" as schemas
        type: string
      sum_latency:
        type: integer
    type: object
  statement.Plan:
    properties:
      content:
        type: string
      digest:
        type: string
    type: object
  statement.TimeRange:
    properties:
      begin_time:
        type: integer
      end_time:
        type: integer
    type: object
  user.TokenResponse:
    properties:
      expire:
        type: string
      token:
        type: string
    type: object
  user.authenticateForm:
    properties:
      is_tidb_auth:
        type: boolean
      password:
        type: string
      username:
        type: string
    required:
      - is_tidb_auth
      - username
    type: object
  utils.APIEmptyResponse:
    type: object
  utils.APIError:
    properties:
      code:
        type: string
      error:
        type: boolean
      full_text:
        type: string
      message:
        type: string
    type: object
  utils.RequestTargetNode:
    properties:
      display_name:
        example: 127.0.0.1:4000
        type: string
      ip:
        example: 127.0.0.1
        type: string
      kind:
        example: tidb
        type: string
      port:
        example: 4000
        type: integer
    type: object
  utils.RequestTargetStatistics:
    properties:
      num_pd_nodes:
        type: integer
      num_tidb_nodes:
        type: integer
      num_tikv_nodes:
        type: integer
    type: object
  utils.VersionInfo:
    properties:
      build_git_branch:
        type: string
      build_git_hash:
        type: string
      build_time:
        type: string
      release_version:
        type: string
    type: object
info:
  contact: {}
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Dashboard API
  version: '1.0'
paths:
  /diagnose/reports:
    post:
      description: Generate sql diagnosis report
      parameters:
        - description: Request body
          in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/diagnose.GenerateReportRequest'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/int'
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: SQL diagnosis report
  /diagnose/reports/{id}/data.js:
    get:
      description: Get sql diagnosis report data
      parameters:
        - description: report id
          in: path
          name: id
          required: true
          type: string
      produces:
        - text/javascript
      responses:
        '200':
          description: OK
          schema:
            type: string
      summary: SQL diagnosis report data
  /diagnose/reports/{id}/detail:
    get:
      description: Get sql diagnosis report HTML
      parameters:
        - description: report id
          in: path
          name: id
          required: true
          type: string
      produces:
        - text/html
      responses:
        '200':
          description: OK
          schema:
            type: string
      summary: SQL diagnosis report
  /diagnose/reports/{id}/status:
    get:
      description: Get diagnosis report status
      parameters:
        - description: report id
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/diagnose.Report'
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: Diagnosis report status
  /foo/bar/{name}:
    get:
      consumes:
        - application/json
      description: Hello world!
      parameters:
        - description: Name
          in: path
          name: name
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: string
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: Greet
  /info/databases:
    get:
      description: Get all databases.
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/info.DatabaseResponse'
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: 'Example: Get all databases'
  /info/info:
    get:
      description: Get information about the dashboard service.
      operationId: getInfo
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/info.InfoResponse'
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: Dashboard info
  /info/whoami:
    get:
      description: Get current login session
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/info.WhoAmIResponse'
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: Current login
  /keyvisual/heatmaps:
    get:
      description: Heatmaps in a given range to visualize TiKV usage
      parameters:
        - description: The start of the key range
          in: query
          name: startkey
          type: string
        - description: The end of the key range
          in: query
          name: endkey
          type: string
        - description: The start of the time range (Unix)
          in: query
          name: starttime
          type: integer
        - description: The end of the time range (Unix)
          in: query
          name: endtime
          type: integer
        - description: Main types of data
          enum:
            - written_bytes
            - read_bytes
            - written_keys
            - read_keys
            - integration
          in: query
          name: type
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/matrix.Matrix'
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: Key Visual Heatmaps
  /logs/download:
    get:
      description: download logs by multiple task IDs
      parameters:
        - description: download token
          in: query
          name: token
          required: true
          type: string
      produces:
        - application/x-tar
        - application/zip
      responses:
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      summary: Download
  /logs/download/acquire_token:
    get:
      description: get download token with multiple task IDs
      parameters:
        - description: task id
          in: query
          items:
            type: string
          name: id
          type: array
      produces:
        - text/plain
      responses:
        '200':
          description: xxx
          schema:
            type: string
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: Get download token
  /logs/taskgroup:
    put:
      description: Create and run task group
      parameters:
        - description: Request body
          in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/logsearch.CreateTaskGroupRequest'
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/logsearch.TaskGroupResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: Create and run task group
  /logs/taskgroups:
    get:
      description: list all log search taskgroups
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            items:
              $ref: '#/definitions/logsearch.TaskGroupModel'
            type: array
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: List all task groups
  /logs/taskgroups/{id}:
    delete:
      description: delete a task group by providing task group ID
      parameters:
        - description: task group id
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/utils.APIEmptyResponse'
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: Delete task group
    get:
      description:
        list all log search tasks in a task group by providing task group
        ID
      parameters:
        - description: Task Group ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/logsearch.TaskGroupResponse'
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: List tasks in a task group
  /logs/taskgroups/{id}/cancel:
    post:
      description: cancel all running tasks in a task group
      parameters:
        - description: task group id
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/utils.APIEmptyResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: Cancel running tasks
  /logs/taskgroups/{id}/preview:
    get:
      description: preview fetched logs in a task group by providing task group ID
      parameters:
        - description: task group id
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            items:
              $ref: '#/definitions/logsearch.PreviewModel'
            type: array
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: Preview logs in a task group
  /logs/taskgroups/{id}/retry:
    post:
      description: retry tasks that has been failed in a task group
      parameters:
        - description: task group id
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/utils.APIEmptyResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: Retry failed tasks
  /profiling/group/cancel/{groupId}:
    post:
      description: Cancel all profling tasks with a given group ID
      operationId: cancelProfilingGroup
      parameters:
        - description: group ID
          in: path
          name: groupId
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: success
          schema:
            type: string
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: Cancel all tasks with a given group ID
  /profiling/group/delete/{groupId}:
    delete:
      description: Delete all finished profiling tasks with a given group ID
      operationId: deleteProfilingGroup
      parameters:
        - description: group ID
          in: path
          name: groupId
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/utils.APIEmptyResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: Delete all tasks with a given group ID
  /profiling/group/detail/{groupId}:
    get:
      description: List all profiling tasks with a given group ID
      operationId: getProfilingGroupDetail
      parameters:
        - description: group ID
          in: path
          name: groupId
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/profiling.GroupDetailResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: List all tasks with a given group ID
  /profiling/group/download:
    get:
      description: Download all finished profiling results of a task group
      operationId: downloadProfilingGroup
      parameters:
        - description: download token
          in: query
          name: token
          required: true
          type: string
      produces:
        - application/x-gzip
      responses:
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: Download all results of a task group
  /profiling/group/download/acquire_token:
    get:
      description: Get download token with a given group ID
      operationId: getProfilingGroupDownloadToken
      parameters:
        - description: group ID
          in: query
          name: id
          type: string
      produces:
        - text/plain
      responses:
        '200':
          description: OK
          schema:
            type: string
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: Get download token for group download
  /profiling/group/list:
    get:
      description: List all profiling groups
      operationId: getProfilingGroups
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            items:
              $ref: '#/definitions/profiling.TaskGroupModel'
            type: array
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: List all profiling groups
  /profiling/group/start:
    post:
      description: Start a profiling task group
      operationId: startProfiling
      parameters:
        - description: profiling request
          in: body
          name: pr
          required: true
          schema:
            $ref: '#/definitions/profiling.StartRequest'
      produces:
        - application/json
      responses:
        '200':
          description: task group
          schema:
            $ref: '#/definitions/profiling.TaskGroupModel'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: Start profiling
  /profiling/single/download:
    get:
      description: Download the finished profiling result of a task
      operationId: downloadProfilingSingle
      parameters:
        - description: download token
          in: query
          name: token
          required: true
          type: string
      produces:
        - application/x-gzip
      responses:
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: Download the result of a task
  /profiling/single/download/acquire_token:
    get:
      description: Get download token with a given task ID
      operationId: getProfilingSingleDownloadToken
      parameters:
        - description: task ID
          in: query
          name: id
          type: string
      produces:
        - text/plain
      responses:
        '200':
          description: OK
          schema:
            type: string
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.APIError'
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: Get download token for single download
  /statements/detail:
    get:
      description: Get statement detail
      parameters:
        - description: Statement schema
          in: query
          name: schema
          required: true
          type: string
        - description: Statement begin time
          in: query
          name: begin_time
          required: true
          type: string
        - description: Statement end time
          in: query
          name: end_time
          required: true
          type: string
        - description: Statement digest
          in: query
          name: digest
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/statement.Detail'
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: Statement detail
  /statements/nodes:
    get:
      description: Get statement in each node
      parameters:
        - description: Statement schema
          in: query
          name: schema
          required: true
          type: string
        - description: Statement begin time
          in: query
          name: begin_time
          required: true
          type: string
        - description: Statement end time
          in: query
          name: end_time
          required: true
          type: string
        - description: Statement digest
          in: query
          name: digest
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            items:
              $ref: '#/definitions/statement.Node'
            type: array
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: Statement nodes
  /statements/overviews:
    get:
      description: Get statements overview
      parameters:
        - description: Target schemas
          in: query
          name: schemas
          type: string
        - description: Statement begin time
          in: query
          name: begin_time
          required: true
          type: string
        - description: Statement end time
          in: query
          name: end_time
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            items:
              $ref: '#/definitions/statement.Overview'
            type: array
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: Statements overview
  /statements/schemas:
    get:
      description: Get all databases of TiDB
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            items:
              type: string
            type: array
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: TiDB databases
  /statements/time_ranges:
    get:
      description: Get all time ranges of the statements
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            items:
              $ref: '#/definitions/statement.TimeRange'
            type: array
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: Statement time ranges
  /topology/alertmanager/{address}/count:
    get:
      description: Get alert number of the alert manager.
      parameters:
        - description: ip:port
          in: path
          name: address
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/int'
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: Get the count of alert
  /topology/all:
    get:
      description: Get information about the dashboard topology.
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/clusterinfo.ClusterInfo'
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: Get all Dashboard topology and liveness.
  /topology/tidb/{address}:
    delete:
      description: Delete etcd's TiDB key with ip:port.
      parameters:
        - description: ip:port
          in: path
          name: address
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: delete ok
        '401':
          description: Unauthorized failure
          schema:
            $ref: '#/definitions/utils.APIError'
      security:
        - JwtAuth: []
      summary: Delete etcd's tidb key.
  /user/login:
    post:
      consumes:
        - application/json
      description: Log into dashboard.
      parameters:
        - description: Credentials
          in: body
          name: message
          required: true
          schema:
            $ref: '#/definitions/user.authenticateForm'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/user.TokenResponse'
        '401':
          description: Login failure
          schema:
            $ref: '#/definitions/utils.APIError'
      summary: Log in
securityDefinitions:
  JwtAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: '2.0'
